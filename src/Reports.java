import java.io.File;
import java.util.ArrayList;
import java.util.Scanner;
import javax.swing.JOptionPane;

public class Reports extends javax.swing.JFrame {

    ArrayList<Patient>allPatients=new ArrayList<>();
    ArrayList<Medicine>allMedicines=new ArrayList<>();
    ArrayList<BillingInfo>record=new ArrayList<>();
    public Reports() 
    {
    initComponents();
    readAllPData();
    readAllMData();
    readAllRData();
    setResizable(false);
    }
    void readAllPData()
    {
        try{
        File pfile = new File("pdata.txt");
        if (!pfile.exists()) {
            pfile.createNewFile();
            return;
        }
        
        Scanner sc = new Scanner(pfile);
        while (sc.hasNextLine()) {
            String data = sc.nextLine().trim();
            if (data.isEmpty()) continue;
            
            String[] curData = data.split(";");
            if (curData.length != 6) continue; // Skip malformed lines
            
            try {
                Patient patient = new Patient();
                patient.setId(Integer.parseInt(curData[0]));
                patient.setName(curData[1]);
                patient.setAge(Integer.parseInt(curData[2]));
                patient.setGender(curData[3]);
                patient.setAddress(curData[4]);
                patient.setContact(curData[5]);
                allPatients.add(patient);
            } catch (NumberFormatException e) {
                System.err.println("Skipping invalid patient data: " + data);
            }
        }
        sc.close();}catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, "Error reading data: " + e.getMessage());
        }
    }
    void readAllMData()
    {
        try
        {
        File mfile = new File("mdata.txt");
        if (!mfile.exists()) {
            mfile.createNewFile();
            return;
        }
        
        Scanner sc = new Scanner(mfile);
        while (sc.hasNextLine()) {
            String data = sc.nextLine().trim();
            if (data.isEmpty()) continue;
            
            String[] curData = data.split(";");
            if (curData.length != 6) continue; // Skip malformed lines
            
            try 
            {
                Medicine medicine = new Medicine();
                medicine.setId(Integer.parseInt(curData[0]));
                medicine.setName(curData[1]);
                medicine.setSellingPrice(Integer.parseInt(curData[2]));
                medicine.setBuyingPrice(Integer.parseInt(curData[3]));
                medicine.setQuantity(Integer.parseInt(curData[4]));
                medicine.setDescription(curData[5]);
                allMedicines.add(medicine);
            } catch (NumberFormatException e) {
                System.err.println("Skipping invalid patient data: " + data);
            }
        }
        sc.close();}
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, "Error reading data: " + e.getMessage());
        }
    }
void readAllRData()
    {
        try
        {
            File mfile = new File("record.txt");
            if (!mfile.exists()) {
                mfile.createNewFile();
                return;
        }
        
        Scanner sc = new Scanner(mfile);
        while (sc.hasNextLine()) {
            String data = sc.nextLine().trim();
            if (data.isEmpty()) continue;
            
            String[] curData = data.split(";");
            if (curData.length != 5) continue; // Skip malformed lines
            
            try {
                BillingInfo record = new BillingInfo();
                record.setPatientID(Integer.parseInt(curData[0]));
                record.setFee(Integer.parseInt(curData[1]));
                record.setRecomendations(curData[2]);
                record.setDate(curData[3]);
                String[] mList=curData[4].split(",");
                for (int i=0;i<mList.length;i++)
                {
                    record.setMedicineID(Integer.parseInt(mList[i]));
                }
                this.record.add(record);
            } catch (NumberFormatException e) {
                System.err.println("Skipping invalid patient data: " + data);
            }
        }
        sc.close();
        }catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, "Error reading data: " + e.getMessage());
        }
    }
/**
 * This method is called from within the constructor to initialize the form.
 * WARNING: Do NOT modify this code. The content of this method is always
 * regenerated by the Form Editor.
 */
@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        home = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        pr = new javax.swing.JTextArea();
        id = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 51, 51));
        jLabel2.setText("Reports Menu");

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel3.setText("Hospital Management System");

        home.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        home.setForeground(new java.awt.Color(255, 0, 0));
        home.setText("Home");
        home.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homeActionPerformed(evt);
            }
        });

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gifs/reports.gif"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(home)
                .addGap(18, 18, 18))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jLabel1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(home))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel4))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pr.setColumns(20);
        pr.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        pr.setRows(5);
        jScrollPane1.setViewportView(pr);

        id.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        id.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 153, 255));
        jLabel5.setText("Enter ID to search");

        jButton1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jButton1.setForeground(new java.awt.Color(0, 255, 0));
        jButton1.setText("Get Record");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 230, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addComponent(id, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(367, 367, 367))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 427, Short.MAX_VALUE)
                .addContainerGap())
        );

        setSize(new java.awt.Dimension(1114, 637));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void homeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homeActionPerformed
        setVisible(false);
        new Home().setVisible(true);
        // TODO add your handling code here:
    }//GEN-LAST:event_homeActionPerformed

    Patient getPData(int cid)
    {
        for (int i=0;i<allPatients.size();i++)
        {
            if(allPatients.get(i).getId()==cid)
            {
                return allPatients.get(i);
            }
        }
        return  null;
    }
    Medicine getMData(int cid)
    {
        for (int i=0;i<allMedicines.size();i++)
        {
            if(allMedicines.get(i).getId()==cid)
            {
                return allMedicines.get(i);
            }
        }
        return  null;
    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

    
        pr.setText(""); // Clear previous results
    
    if (id.getText().equals("")) {
        JOptionPane.showMessageDialog(null, "Please enter patient ID.");
        return;
    }

    try {
        int searchId = Integer.parseInt(id.getText());
        boolean found = false;
        
        for (BillingInfo billingInfo : record) {
            if (billingInfo.getPatientID() == searchId) {
                found = true;
                Patient patient = getPData(billingInfo.getPatientID());
                
                if (patient == null) {
                    pr.append("Patient not found in records!\n");
                    continue;
                }
                
                pr.append("===== MEDICAL REPORT =====\n");
                
                pr.append("\n[PATIENT DETAILS]\n");
                pr.append("ID: " + patient.getId() + "\n");
                pr.append("Name: " + patient.getName() + "\n");
                pr.append("Age: " + patient.getAge() + " | Gender: " + patient.getGender() + "\n");
                pr.append("Contact: " + patient.getContact() + "\n");
                pr.append("Address: " + patient.getAddress() + "\n");
                
                pr.append("\n[BILLING DETAILS]\n");
                pr.append("Consultation Fee: Rs." + billingInfo.getFee() + "\n");
                pr.append("Date: " + billingInfo.getDate() + "\n");
                
                ArrayList<Integer> medicineIDs = billingInfo.getMedicineID();
                if (!medicineIDs.isEmpty()) {
                    pr.append("\n[PRESCRIBED MEDICINES]\n");
                    double totalMedicineCost = 0;
                    
                    for (int medId : medicineIDs) {
                        Medicine medicine = getMData(medId);
                        if (medicine != null) {
                            pr.append("- " + medicine.getName() + " (Rs." + medicine.getSellingPrice() + ")\n");
                            totalMedicineCost += medicine.getSellingPrice();
                        }
                    }
                    
                    pr.append("\nTotal Medicine Cost: Rs." + totalMedicineCost + "\n");
                    pr.append("Grand Total: Rs." + (totalMedicineCost + billingInfo.getFee()) + "\n");
                } else {
                    pr.append("\nNo medicines prescribed.\n");
                }
                
                pr.append("\n[DOCTOR'S RECOMMENDATIONS]\n");
                pr.append(billingInfo.getRecomendations() + "\n");
                
                pr.append("=================================\n");
            }
        }
        
        if (!found) {
            pr.setText("No records found for patient ID: " + searchId);
        }
        
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(null, "Invalid ID format. Please enter a numeric ID.");
    }
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void idActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_idActionPerformed

/**
 * @param args the command line arguments
 */
public static void main(String args[]) {
    try {
        for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
            if ("Nimbus".equals(info.getName())) {
                javax.swing.UIManager.setLookAndFeel(info.getClassName());
                break;
            }
        }
    } catch (ClassNotFoundException ex) {
        java.util.logging.Logger.getLogger(Reports.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (InstantiationException ex) {
        java.util.logging.Logger.getLogger(Reports.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (IllegalAccessException ex) {
        java.util.logging.Logger.getLogger(Reports.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (javax.swing.UnsupportedLookAndFeelException ex) {
        java.util.logging.Logger.getLogger(Reports.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    //</editor-fold>

    /* Create and display the form */
    java.awt.EventQueue.invokeLater(new Runnable() {
    public void run() {
        new Reports().setVisible(true);
    }
    });
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton home;
    private javax.swing.JTextField id;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea pr;
    // End of variables declaration//GEN-END:variables
}
